// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package internal

import (
	"github.com/dotboris/standard-backups/internal/config"
	"github.com/dotboris/standard-backups/pkg/proto"
	mock "github.com/stretchr/testify/mock"
)

// newMockBackuper creates a new instance of mockBackuper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBackuper(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBackuper {
	mock := &mockBackuper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockBackuper is an autogenerated mock type for the backuper type
type mockBackuper struct {
	mock.Mock
}

type mockBackuper_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBackuper) EXPECT() *mockBackuper_Expecter {
	return &mockBackuper_Expecter{mock: &_m.Mock}
}

// Backup provides a mock function for the type mockBackuper
func (_mock *mockBackuper) Backup(req *proto.BackupRequest) error {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Backup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.BackupRequest) error); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockBackuper_Backup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backup'
type mockBackuper_Backup_Call struct {
	*mock.Call
}

// Backup is a helper method to define mock.On call
//   - req *proto.BackupRequest
func (_e *mockBackuper_Expecter) Backup(req interface{}) *mockBackuper_Backup_Call {
	return &mockBackuper_Backup_Call{Call: _e.mock.On("Backup", req)}
}

func (_c *mockBackuper_Backup_Call) Run(run func(req *proto.BackupRequest)) *mockBackuper_Backup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *proto.BackupRequest
		if args[0] != nil {
			arg0 = args[0].(*proto.BackupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockBackuper_Backup_Call) Return(err error) *mockBackuper_Backup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockBackuper_Backup_Call) RunAndReturn(run func(req *proto.BackupRequest) error) *mockBackuper_Backup_Call {
	_c.Call.Return(run)
	return _c
}

// newMockNewBackendClienter creates a new instance of mockNewBackendClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockNewBackendClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockNewBackendClienter {
	mock := &mockNewBackendClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockNewBackendClienter is an autogenerated mock type for the newBackendClienter type
type mockNewBackendClienter struct {
	mock.Mock
}

type mockNewBackendClienter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockNewBackendClienter) EXPECT() *mockNewBackendClienter_Expecter {
	return &mockNewBackendClienter_Expecter{mock: &_m.Mock}
}

// NewBackendClient provides a mock function for the type mockNewBackendClienter
func (_mock *mockNewBackendClienter) NewBackendClient(cfg config.Config, name string) (backuper, error) {
	ret := _mock.Called(cfg, name)

	if len(ret) == 0 {
		panic("no return value specified for NewBackendClient")
	}

	var r0 backuper
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(config.Config, string) (backuper, error)); ok {
		return returnFunc(cfg, name)
	}
	if returnFunc, ok := ret.Get(0).(func(config.Config, string) backuper); ok {
		r0 = returnFunc(cfg, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backuper)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(config.Config, string) error); ok {
		r1 = returnFunc(cfg, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockNewBackendClienter_NewBackendClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBackendClient'
type mockNewBackendClienter_NewBackendClient_Call struct {
	*mock.Call
}

// NewBackendClient is a helper method to define mock.On call
//   - cfg config.Config
//   - name string
func (_e *mockNewBackendClienter_Expecter) NewBackendClient(cfg interface{}, name interface{}) *mockNewBackendClienter_NewBackendClient_Call {
	return &mockNewBackendClienter_NewBackendClient_Call{Call: _e.mock.On("NewBackendClient", cfg, name)}
}

func (_c *mockNewBackendClienter_NewBackendClient_Call) Run(run func(cfg config.Config, name string)) *mockNewBackendClienter_NewBackendClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 config.Config
		if args[0] != nil {
			arg0 = args[0].(config.Config)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockNewBackendClienter_NewBackendClient_Call) Return(backuperMoqParam backuper, err error) *mockNewBackendClienter_NewBackendClient_Call {
	_c.Call.Return(backuperMoqParam, err)
	return _c
}

func (_c *mockNewBackendClienter_NewBackendClient_Call) RunAndReturn(run func(cfg config.Config, name string) (backuper, error)) *mockNewBackendClienter_NewBackendClient_Call {
	_c.Call.Return(run)
	return _c
}
