// Code generated by mockery. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// MockbackupBackend is an autogenerated mock type for the backupBackend type
type MockbackupBackend struct {
	mock.Mock
}

type MockbackupBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbackupBackend) EXPECT() *MockbackupBackend_Expecter {
	return &MockbackupBackend_Expecter{mock: &_m.Mock}
}

// Backup provides a mock function with given fields: _a0, _a1
func (_m *MockbackupBackend) Backup(_a0 []string, _a1 map[string]any) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Backup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, map[string]any) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockbackupBackend_Backup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backup'
type MockbackupBackend_Backup_Call struct {
	*mock.Call
}

// Backup is a helper method to define mock.On call
//   - _a0 []string
//   - _a1 map[string]any
func (_e *MockbackupBackend_Expecter) Backup(_a0 interface{}, _a1 interface{}) *MockbackupBackend_Backup_Call {
	return &MockbackupBackend_Backup_Call{Call: _e.mock.On("Backup", _a0, _a1)}
}

func (_c *MockbackupBackend_Backup_Call) Run(run func(_a0 []string, _a1 map[string]any)) *MockbackupBackend_Backup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(map[string]any))
	})
	return _c
}

func (_c *MockbackupBackend_Backup_Call) Return(_a0 error) *MockbackupBackend_Backup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockbackupBackend_Backup_Call) RunAndReturn(run func([]string, map[string]any) error) *MockbackupBackend_Backup_Call {
	_c.Call.Return(run)
	return _c
}

// Enabled provides a mock function with no fields
func (_m *MockbackupBackend) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockbackupBackend_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type MockbackupBackend_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *MockbackupBackend_Expecter) Enabled() *MockbackupBackend_Enabled_Call {
	return &MockbackupBackend_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *MockbackupBackend_Enabled_Call) Run(run func()) *MockbackupBackend_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockbackupBackend_Enabled_Call) Return(_a0 bool) *MockbackupBackend_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockbackupBackend_Enabled_Call) RunAndReturn(run func() bool) *MockbackupBackend_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbackupBackend creates a new instance of MockbackupBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbackupBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbackupBackend {
	mock := &MockbackupBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
