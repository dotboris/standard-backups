// Code generated by mockery. DO NOT EDIT.

package internal

import (
	proto "github.com/dotboris/standard-backups/pkg/proto"
	mock "github.com/stretchr/testify/mock"
)

// Mockbackuper is an autogenerated mock type for the backuper type
type Mockbackuper struct {
	mock.Mock
}

type Mockbackuper_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockbackuper) EXPECT() *Mockbackuper_Expecter {
	return &Mockbackuper_Expecter{mock: &_m.Mock}
}

// Backup provides a mock function with given fields: req
func (_m *Mockbackuper) Backup(req *proto.BackupRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Backup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.BackupRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockbackuper_Backup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backup'
type Mockbackuper_Backup_Call struct {
	*mock.Call
}

// Backup is a helper method to define mock.On call
//   - req *proto.BackupRequest
func (_e *Mockbackuper_Expecter) Backup(req interface{}) *Mockbackuper_Backup_Call {
	return &Mockbackuper_Backup_Call{Call: _e.mock.On("Backup", req)}
}

func (_c *Mockbackuper_Backup_Call) Run(run func(req *proto.BackupRequest)) *Mockbackuper_Backup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.BackupRequest))
	})
	return _c
}

func (_c *Mockbackuper_Backup_Call) Return(_a0 error) *Mockbackuper_Backup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockbackuper_Backup_Call) RunAndReturn(run func(*proto.BackupRequest) error) *Mockbackuper_Backup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbackuper creates a new instance of Mockbackuper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbackuper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockbackuper {
	mock := &Mockbackuper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
